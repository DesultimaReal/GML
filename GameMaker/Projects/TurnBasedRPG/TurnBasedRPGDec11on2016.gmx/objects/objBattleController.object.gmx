<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar inCombat, enemyID, battleMenuSelection, choosingEnemy, enemySelection, playerAttacking, ranAway, isDefending;
inCombat = false;
enemyID = 0;
battleMenuSelection = 0;
selectingEnemy = false;
enemySelection = 0;
playerAttacking = false;
ranAway = false;
isDefending = false;
//Menu for Battle
battleMenu[0] = "Attack";
battleMenu[1] = "Defend";
battleMenu[2] = "Skills";
battleMenu[3] = "Escape";
//Arrays
globalvar playerParty, enemyParty;
playerParty[0] = objSara;
playerParty[1] = objVera;
playerParty[2] = objKira;

//More Variables
globalvar isSelectingPlayer, isSelectingFromMenu,isChoosingSkills,drawSkills,skillsChosen,skillsMenu,playerChosen, deadEnemies, enemyChosen;
isSelectingPlayer = false;
isSelectingFromMenu = false;
playerChosen = 0;
enemyChosen = 0;
deadEnemies = 0;
isChoosingSkills = false;
drawSkills = false;
skillsChosen = 0;
skillsMenu[0] = "Fireball";
skillsMenu[1] = "Heal";
skillsMenu[2] = "Lightning";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn Enemy and playes
show_message(array_length_1d(playerParty));

for(i = 1; i &lt; array_length_1d(playerParty); ++i){
    instance_create(200, 200 + (i * 200), playerParty[i]);
    playerParty[i].image_speed = 0;
    playerParty[i].image_index = 0;
    playerParty[i].sprite_index = playerParty[i].myAnims[4];
}
for(i = 0;  i &lt; array_length_1d(enemyParty); ++i){
    enemyParty[i] = instance_create(1200, 150 + (i * 200), enemyParty[i]);
}
//instance_create(1000, 150, enemyID);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu Selection
if(inCombat)
{
    ///Choosing a player/////
    if(isSelectingPlayer) {
    show_debug_message("CurrentlySelectingPlayer");
        if(keyboard_check_pressed(ord("S")))
            playerChosen = clamp(++playerChosen, 0, array_length_1d(playerParty) - 1);
        if(keyboard_check_pressed(ord("W")))
            playerChosen = clamp(--playerChosen, 0, array_length_1d(playerParty) - 1);
    ///Choose to act with a player
        if(keyboard_check_pressed(vk_space) &amp;&amp; (playerParty[playerChosen].isActive == false)){
            show_message("Player is dead");
        }
        else if(keyboard_check_pressed(vk_enter) or keyboard_check_pressed(vk_space)) {
            isSelectingPlayer = false;
            isSelectingFromMenu = true;
        }
    }
    else if(isSelectingFromMenu){
    show_debug_message("FinishedSelectingPlayer,Selecting Action");
        if(keyboard_check_pressed(ord("A")))
        {
            if((battleMenuSelection - 1) &lt; 0)
                battleMenuSelection = (array_length_1d(battleMenu) - 1)
            else
                --battleMenuSelection;
        }
        else if(keyboard_check_pressed(ord("D")))
        {
            if((battleMenuSelection + 1) &gt; (array_length_1d(battleMenu) - 1))
                battleMenuSelection = 0;
            else
                ++battleMenuSelection;
        }
        ///Selecting An enemy
        if(battleMenuSelection == 0 &amp;&amp; keyboard_check_pressed(vk_space))
        {
            if(!selectingEnemy){
                selectingEnemy = true;
                isSelectingFromMenu = false;
            }
        }
        ///Defend
        if(battleMenuSelection == 1 &amp;&amp; keyboard_check_pressed(vk_space))
        {
            
            if(playerParty[playerChosen].currentEnergy &gt; (playerParty[playerChosen].maxEnergy/2))
            {
                isDefending = true;
                playerParty[playerChosen].currentEnergy -= (playerParty[playerChosen].maxEnergy/2);
            }
        }
        if(battleMenuSelection == 2 &amp;&amp; keyboard_check_pressed(vk_space)){
            isChoosingSkills = true;
            isSelectingFromMenu = false;
        }
        ///Escaping
        if(battleMenuSelection == 3 &amp;&amp; keyboard_check_pressed(vk_space) 
        &amp;&amp; playerParty[playerChosen].currentEnergy &gt;= (playerParty[playerChosen].maxEnergy/2))
        {
            playerParty[playerChosen].currentEnergy -= (playerParty[playerChosen].maxEnergy/2);
            if(irandom_range(0,3) == 1){
                ranAway = true;
            }
            isDefending = false;   
        }
        if(keyboard_check_pressed(vk_escape)){
            isSelectingFromMenu = false;
            isSelectingPlayer = true;
        }
    }
    else if(isChoosingSkills){
        if(keyboard_check_pressed(ord("D"))){
            skillsChosen = clamp(++skillsChosen, 0, array_length_1d(skillsMenu) - 1);
        }
        if(keyboard_check_pressed(ord("A"))){
            skillsChosen = clamp(--skillsChosen, 0, array_length_1d(skillsMenu) - 1);
        }
        if(keyboard_check_pressed(vk_escape)){
            isChoosingSkills = false;
            isSelectingFromMenu = true;
        }
        
    }
        ////////CHOOSING AN ENEMY/////////////////
        else if(selectingEnemy){
            if(keyboard_check_pressed(ord("S"))){
                enemyChosen = clamp(++enemyChosen, 0, array_length_1d(enemyParty) - 1);
                show_debug_message("SPressed");
            }
            if(keyboard_check_pressed(ord("W"))){
                enemyChosen = clamp(--enemyChosen, 0, array_length_1d(enemyParty) - 1);
                show_debug_message("WPressed");
            }
            ///Attack the enemy
            if(keyboard_check_pressed(vk_space) &amp;&amp; (enemyParty[enemyChosen].isActive ==false)){
                show_message("Enemy is already dead.");
            }
            else if(keyboard_check_pressed(vk_space) &amp;&amp; playerParty[playerChosen].currentEnergy &gt;= playerParty[playerChosen].maxEnergy)
            {
                playerAttacking = true;
                playerParty[playerChosen].sprite_index = playerParty[playerChosen].myAnims[5];
                playerParty[playerChosen].image_speed = 0.1;
                playerParty[playerChosen].currentEnergy = 0;
                selectingEnemy = false;
                isDefending = false;
                show_debug_message("HitCurrentlySelectedEnemy");
            }
        }
    //Undoing Selection
    if(keyboard_check(vk_escape) &amp;&amp; selectingEnemy)
    {
        selectingEnemy = false;
        isSelectingFromMenu = true;
    }
}
    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Defeat Enemy
if(inCombat)
{
    if(deadEnemies == array_length_1d(enemyParty)){
        for(i = 0; i &lt; array_length_1d(enemyParty); ++i){
            for(j = 0; j &lt; array_length_1d(playerParty); ++j){
                playerParty[j].currentXP += enemyParty[i].XP;
                //Give items
                
            }
            with(enemyParty[i])
                instance_destroy();
            if(i == array_length_1d(enemyParty))
                break;
        }
        for(i = 1; i &lt; array_length_1d(playerParty); ++i) {
            with(playerParty[i])
                instance_destroy();
        }
        room_goto(rmStart);
        playerParty[0].x = playerParty[0].beforeBattleX;
        playerParty[0].y = playerParty[0].beforeBattleY;
        playerParty[0].sprite_index = playerParty[0].myAnims[2];
        instance_create(0,0,objFade);
        inCombat = false;
    }
    
    /*if (enemyID.currentHealth &lt;= 0)
    {
        playerParty[0].currentXP = enemyID.XP;
        with(enemyID)
            instance_destroy();
        room_goto(rmStart);
        playerParty[0].x = playerParty[0].beforeBattleX;
        playerParty[0].y = playerParty[0].beforeBattleY;
        playerParty[0].sprite_index = spr_sara_Wdown;
        instance_create(0,0,objFade);
        inCombat = false;
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///run from battle
if(ranAway)
{
    with(enemyID)
        instance_destroy();
    room_goto(rmStart);
    objSara.x = objSara.beforeBattleX;
    objSara.y = objSara.beforeBattleY;
    objSara.sprite_index = spr_sara_Wdown;
    instance_create(0,0,objFade);
    inCombat = false;
    ranAway = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Defending from the enemy
if(inCombat){

    if(isDefending)
        objSara.defense = objSara.defenseWhileDefending;
    if(isDefending)
        objSara.defense = 1;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Battle Menu Options
if(inCombat &amp;&amp; !isChoosingSkills)
{
    for(i = 0; i &lt; array_length_1d(battleMenu); ++i)
    {
        draw_text(200 * i + 450, 660, battleMenu[i]);
        
        if(i == battleMenuSelection)
        {
            draw_line_colour(200 * i + 445, 680, 200 * i + 510, 680, c_red, c_red);
        }
    }
}
if(inCombat &amp;&amp; isChoosingSkills){
    draw_sprite(spr_SkillsMenu, 0, room_width/2, room_height - 150);
    
    for(i = 0; i &lt; array_length_1d(skillsMenu); ++ i) {
        draw_text(450 + (i * 150), 450, skillsMenu[i]);
        
        if(i == skillsChosen)
            draw_line_colour(450 + (i * 150), 470, 515 + (i * 150), 470, c_green, c_green);
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Healthbar &amp; names
if(inCombat){
//Health and stamina for player party
    for(i = 0; i &lt; array_length_1d(playerParty); ++i) {
        draw_text(playerParty[i].x - 30, playerParty[i].y + 35, playerParty[i].firstName);
        draw_healthbar(playerParty[i].x - 20, playerParty[i].y - 40, 
        playerParty[i].x + 20, playerParty[i].y - 60, 
        (playerParty[i].currentHealth/playerParty[i].maxHealth) * 100, c_black, c_red, c_lime, 0,1,1);
        draw_healthbar(playerParty[i].x - 25, playerParty[i].y + 60, playerParty[i].x + 15, 
        playerParty[i].y + 70, 
        (playerParty[i].currentEnergy/playerParty[i].maxEnergy) * 100, c_dkgray, c_dkgray, c_blue, 0,1,1);
    }
    //HP and stam for en party
    for(i = 0; i &lt; array_length_1d(enemyParty); ++i) {
        draw_text(enemyParty[i].x - 30, enemyParty[i].y + 35, enemyParty[i].name);
        draw_healthbar(enemyParty[i].x - 20, enemyParty[i].y - 40, 
        enemyParty[i].x + 20, enemyParty[i].y - 60, 
        (enemyParty[i].currentHealth/enemyParty[i].maxHealth) * 100, c_black, c_red, c_lime, 0,1,1);
        draw_healthbar(enemyParty[i].x - 25, enemyParty[i].y + 60, enemyParty[i].x + 15, 
        enemyParty[i].y + 70, 
        (enemyParty[i].currentEnergy/enemyParty[i].maxEnergy) * 100, c_dkgray, c_dkgray, c_blue, 0,1,1);
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw circle over enemy or player
if(inCombat &amp;&amp; selectingEnemy)
{
    draw_circle(enemyParty[enemyChosen].x, enemyParty[enemyChosen].y, 32, true);
}
if(inCombat &amp;&amp; isSelectingPlayer)
{
    draw_circle(playerParty[playerChosen].x, playerParty[playerChosen].y, 32, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
